1. O que são repositories: são uma classe(ou camada) que vai ser responsável por fazer 
toda a manipulação de dados no banco da nossa aplicação.

2. SOLID
S -> SRP: Single Responsability Principle(Principio da Responsabilidade Única)
O -> OCP: Open-Closed Principle(Principio Aberto/Fechado)
L -> LSP: Liskov Substitution Principle(Principio de Substituição de Liskov)
I -> ISP: Interface Segregation Principle(Principio da Segregação de Interface)
D -> DIP: Dependency Inversion Principle(Principio da Inversão de Dependendia) 

3. Controllers são classes que recebem a requisição e retornam a resposta para quem está
chamando elas. São importantes também para que os Casos de Uso, desacoplados dos Controllers, 
possam ser testados sem ativar um servidor web.

4. Nos useCases estarão nossas regras de negócios.

5. Por que não foi criado uma interface para o useCases? Por que nos useCases são tratados 
as regras de negócio, já os repositories são as classes que vão ser responsáveis pela 
manipulação dos dados, ou seja, estão mais sujeitas à mudanças ao longo do tempo, logo é
interessante abstrair os repositories por meio de uma interface, pois caso queiramos usar 
outra "classe filha" dessa interface não teremos que alterar nada na nossa classe de 
useCases, ou seja, as regras de negócio não sofrem modificação.  

6. A versão 3.8 adicionou os campos privados, que é uma maneira de declarar
que um campo de uma classe é inacessível fora daquela classe, incluindo subclasses.

7. O ES6 inclui membros estáticos e o TypeScript também. Os membros estáticos de uma
classe são acessados ​​usando o nome da classe e a notação de ponto, sem criar um
objeto, por exemplo, <ClassName>.<StaticMember>. Ou seja, são membros pertencentes a 
classe e não a cada objeto.
https://www.tutorialsteacher.com/typescript/typescript-static

8. Alterar o escopo de um construtor para private remove nossa capacidade de usar
a palavra-chave new fora da classe. Ou seja, a palavra chave new fica inacessível 
fora daquela classe, incluindo subclasses, e ficando acessível somente dentro da classe. 

9. Um padrao de projeto muito comum em JS é a funcao factory.
Funcao factory é uma funcao que retorna um objeto.
https://github.com/PedroAraujoNogueira/JavaScript_Conceitos/blob/master/C_Funcao/O1_funcaoFactory.js

10. Modificador de acesso Protected
Pode ser acessado pela mesma classe e classes filhas, não pode ser acessado por outras classes.
Ou seja, o protected foi feito para liberar o acesso ao atributo(deixar public) para os filhos, 
e deixar privado para todas as outras classes.
https://www.treinaweb.com.br/blog/modificadores-de-acesso-no-typescript

11. Modificador de acesso Readonly
Pode ser acessado fora da classe, mas não é possível alterar o seu valor.
https://www.treinaweb.com.br/blog/modificadores-de-acesso-no-typescript

12. Métodos Get e Set
https://www.treinaweb.com.br/blog/modificadores-de-acesso-no-typescript

13. Nomenclaturas:
Entities(ou model): São classes que representam os dados na sua aplicação. A 
forma como eles serão representados.
EX: 
class User {
  id?: string;
  email: string;
  password: string;
  
  constructor() {
    if (!this.id) { this.id = uuidV4(); } 
  }
}

Repositories: Classes que manipulam os dados orintudos das Entities. Aqui
é feito todos os cadastros, listagem, edição, deleção desses dados. Vale 
ressaltar que aqui não há nenhuma verificação, como se já existe algum usuário antes de
inserir outro com os mesmos dados e etc. Aqui é a forma pura de manipulação dos dados.
EX: 
class UsersRepository implements IUsersRepository {
  private users: User[] = [];
  
  create({ email, password }: ICreateUserDTO): User {
    const user = new User();
    Object.assign(User, { email, password });
    this.users.push(user);
    
    return user;
  }
}

useCases/Services: São classes que possuem uma única responsabilidade específica e que 
acessam os repositories para realizar sua tarefa. Aqui sim entram as regras de negócio.
Por exemplo, para criar um usuário na aplicação, um CreateUserUseCase que terá a única 
função de criar um usuário, contudo, ele validará se já existe um usuário com o e-mail 
enviado, por exemplo, para aí sim chamar o repositório de usuários para realizar a criação 
deste usuário.

EX:
class CreateUserUseCase {
 
  constructor(
    private usersRepository: IUsersRepository 
  ) {}
  
  execute({ email, password }: IRequest): User {
    const userExists = usersRepository.findByEmail(email);
    
    if (!userExists) throw new Error ('User already exists');
    
    const user = usersRepository.create({ email, password });
    
    return user;
  }
}

Controllers: São as classes que tem a única responsabilidade de receber o que vem 
da rota (o request), enviar esses dados para o useCase ou Service e retornar (o response)
a resposta do useCase (ou Service) para a rota.

EX:
class CreateUserController {
  handle(response: Response, request: Request): Request {
    const { email, password } = request.body;
    
    const user = createUserUseCas.execute({ email, password });
    
    return response.status(201).json(user);
  }
}


